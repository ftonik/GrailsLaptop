version: 2.1

orbs:
  git: opuscapita/git@volatile

aliases:
  - &inject-environment
    name: Inject environment
    command: /bin/env_inject.sh

  - &restore-cache-grails
    keys:
      - v1-rfq-{{ .Branch }}-{{ checksum "grails-app/conf/BuildConfig.groovy" }}
      - v1-rfq-{{ .Branch }}
      - v1-rfq
  - &save-cache-grails
    key: v1-rfq-{{ .Branch }}-{{ checksum "grails-app/conf/BuildConfig.groovy" }}
    paths:
      - ~/.m2/repository
      - target/projects/rfq/plugins
  - &calculate-docker-variables
    name: Calculate docker repository and tag names
    command: |
      slugify() { echo $1 | iconv -t ascii//TRANSLIT | sed -E s/[^a-zA-Z0-9]+/-/g | sed -E s/^-+\|-+$//g | tr A-Z a-z | cut -c1-53; }
      GITHUB_PROJECT="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
      DOCKER_IMAGE_REPOSITORY="$(echo ${GITHUB_PROJECT} | tr '[:upper:]' '[:lower:]')"
      if [[ -z "${CIRCLE_TAG}" ]]; then
        DOCKER_IMAGE_TAG="$(slugify ${CIRCLE_BRANCH})"
      else
        DOCKER_IMAGE_TAG="$(slugify ${CIRCLE_TAG})"
      fi
      echo "export DOCKER_IMAGE_REPOSITORY=${DOCKER_IMAGE_REPOSITORY}" >> ${BASH_ENV}
      echo "export DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}" >> ${BASH_ENV}

docker_and_working_directory: &docker_and_working_directory
  docker:
    - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  working_directory: ~/build

jobs:
  build:
    <<: *docker_and_working_directory
    steps:
      - run: *inject-environment
      - git/checkout-with-submodules
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache: *restore-cache-grails
      - run:
          name: Refresh dependencies
          command: grails refresh-dependencies --non-interactive
      - run:
          name: Run tests
          command: |
            export TEST_FILES_COUNT=`find test -type f -name "*.groovy" -o -name "*.java" 2>/dev/null | wc -l`
            if ((TEST_FILES_COUNT > 0)); then
              grails test-app --stacktrace --offline
            else
              echo "Not test files found!"
            fi
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-xml-reports/
            find . -type f -regex ".*/target/test-reports/.*xml" -exec cp -v {} ~/test-xml-reports/ \;
          when: always
      - store_test_results:
          path: ~/test-xml-reports
      - store_artifacts:
          path: ~/test-xml-reports
      - run:
          # we need this step only during releases
          # command generates list of all secured resource in the application into special xml
          # that is(could be) used for releases comparison (difference in secured resources)
          name: Generate secured resources
          command: |
            if [ ! -z "${CIRCLE_TAG}" ]; then
              grails GenerateSecuredResourcesXml --stacktrace --offline
            else
              echo "This step is skipped as this is not a release build"
            fi
      - run:
          # we need this step only during releases
          # standard customization area is filled with the files from app and plugins
          # this would allow project developers to see whole set of files that could be customized
          name: Add plugin resources to standard customization area
          command: |
            if [ ! -z "${CIRCLE_TAG}" ]; then
              grails AddPluginResourcesToCustomizationArea --offline
            else
              echo "This step is skipped as this is not a release build"
            fi
      - run:
          name: Deploy build artifact to Maven repository
          command: grails maven-deploy -Dgrails.env=prod -verbose
      # - run: *calculate-docker-variables
      # - run:
      #     name: Build application Docker image and push it into Docker repository
      #     command: |
      #       NAME=$(cat application.properties | grep app.name | cut -d'=' -f2)
      #       VERSION=$(cat application.properties | grep app.version | cut -d'=' -f2)
      #       # docker login as we 1) might use private images in Docker file already 2) push application image into central repo later
      #       docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
      #       # build image
      #       docker build --no-cache \
      #         --build-arg WAR_PATH=./target/$NAME-$VERSION.war \
      #         --build-arg VCS_URL="${CIRCLE_REPOSITORY_URL}" \
      #         --build-arg VCS_REF="${CIRCLE_SHA1}" \
      #         --build-arg NAME="${NAME}" \
      #         --build-arg VERSION="${VERSION}" \
      #         --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
      #         -t "${DOCKER_IMAGE_REPOSITORY}:${DOCKER_IMAGE_TAG}" .
      #       # push app image
      #       docker push "${DOCKER_IMAGE_REPOSITORY}:${DOCKER_IMAGE_TAG}"
      - run:
          # we need this step only during releases
          name: Build and deploy docs
          command: |
            if [ ! -z "${CIRCLE_TAG}" ]; then
              rm -rf plugin.xml
              grails doc --offline
              grailsTechnicalDocumentationRsyncToAzure.sh
            else
              echo "This step is skipped as this is not a release build"
            fi
      - run:
          name: Cleanup local repository before saving its content into cache
          command: |
            du -sh ~/.m2/repository
            # removing our application/module artifact (it just takes additional space but unused)
            export PROJECT_GROUP_ID=$(grep -e "grails.project.groupId.*" grails-app/conf/Config.groovy | grep -o -Ee "com.\w+.\w+")
            rm -rfv ~/.m2/repository/${PROJECT_GROUP_ID//.//}
            # removing SNAPSHOT libraries as they are mutable in time and needs to de loaded again each time when it is required
            find ~/.m2/repository -type d -name '*-SNAPSHOT' -prune -exec rm -rf {} +
            du -sh ~/.m2/repository
      - run:
          name: Remove installed SNAPSHOT plugins before saving them into cache
          command: |
            rm -rf target/projects/rfq/plugins/*-SNAPSHOT
      - save_cache: *save-cache-grails

  # deploy-demo:
  #   docker:
  #     - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  #   working_directory: ~/build
  #   steps:
  #     - run: *inject-environment
  #     - checkout
  #     - run: *calculate-docker-variables
  #     - run:
  #         name: Commit to continuous-deployment branch
  #         command: |
  #           git config --global user.email "${GH_MAIL}"
  #           git config --global user.name "${GH_NAME}"
  #           git checkout continuous-deployment

  #           message=$(mktemp)

  #           cat \<< EOF >$message
  #           Deploy ${CIRCLE_BRANCH} at ${CIRCLE_SHA1}

  #           [branch:${CIRCLE_BRANCH}]
  #           [commit:${CIRCLE_SHA1}]
  #           [docker_image_repository:${DOCKER_IMAGE_REPOSITORY}]
  #           [docker_image_tag:${DOCKER_IMAGE_TAG}]
  #           EOF

  #           n=0
  #           until [ $n -ge 5 ]; do
  #             git fetch origin
  #             git reset --hard @{u}
  #             git commit --allow-empty -F $message
  #             git push && break
  #             n=$[$n+1]
  #           done

  #           if [ $n -ge 5 ]; then
  #             echo "Failed to push 5 times, exiting."
  #             exit 1
  #           fi

workflows:
  version: 2
  build-release-from-tag:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
  build-and-deploy-to-cloud:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      # - deploy-demo:
      #     requires:
      #      - build
      #     filters:
      #       tags:
      #         ignore: /.*/
